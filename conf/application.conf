# This is the main configuration file for the application.
# ~~~~~

play.cache.bindCaches = ["db-cache", "user-cache", "session-cache"]

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "MYPLAYCRYPTOSECRETKEY"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#


db.default.url = "jdbc:mysql://localhost:3306/db?characterEncoding=UTF-8"
db.default.username = yogibear
db.default.password = "yogibear"

db.default.driver=com.mysql.jdbc.Driver
ebean.default = ["web.db.models.*"]


play.http.errorHandler = "web.controllers.general.ErrorHandler"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=true

# You can disable evolutions for a specific datasource if necessary
play.evolutions.db.default.enabled=false


# AWS SES Mailer Configuration
aws.ses.access.key="myawssesaccesskey"
aws.ses.secret.key="myawssessecretkey"
aws.ses.from.email="youremailaddress@domain.com"


# Firebase Credentials
firebase.notification.v0.endpoint.url="https://fcm.googleapis.com/fcm/send"
firebase.notification.v0.authorization.key="myfirebasenotificationv0authorizationkey"


# Intellecto API key
intellecto.api.key = "myintellectoapikey"


play.filters {
    cors {
    # Filter paths by a whitelist of path prefixes
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = ["GET", "POST"]

    allowedHttpHeaders = ["Accept"]
    preflightMaxAge = 3 days
  }
}
